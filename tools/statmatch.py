#!/usr/bin/env python3
import sys
import json

def mktree(ptset):
    root = {}
    toks = []
    pts = iter(ptset)
    for tok, path in pts:
        node = root
        for char in path:
            if char in node:
                node = node[char]
            else:
                node[char] = node = {}
        node[None] = tok
        toks.append((tok, path))
    return root, toks

def statmat(tree, icase, tab="    ", depth=1):
    idt = tab * depth
    print(idt + "c = *str++;")
    print(idt + "switch(c)")
    print(idt + "{")
    for c in sorted(tree.keys(), key=lambda k: (k is None, k)):
        if c is None:
            print(idt + tab +"default:")
            print(idt + tab + tab +"res = {0};".format(tree[c]))
            break
        if icase:
            print(idt + tab + "case '{0}':".format(c.lower()))
            print(idt + tab + "case '{0}':".format(c.upper()))
        else:
            print(idt + tab + "case '{0}':".format(c))
        statmat(tree[c], icase, tab, depth+3)
    print(idt + "}")
    if depth > 1:
        print(idt + "break;")

def wrapmat(tree, icase, toks, mtype, mident, mrident, tab="  "):
    if len(toks) == 0:
        return

    print("enum {0}".format(mtype))
    print("{")
    itoks = (p[0] for p in toks)
    tok = next(itoks)
    print(tab + tok + " = 1", end="")
    for tok in itoks:
        print(",")
        print(tab + tok, end="")
    print("\n};\n\n")

    print("static inline const char *{1}(enum {0} e)".format(mtype, mrident))
    print("{")
    print(tab + "switch(e)")
    print(tab + "{")
    for tok, val in toks:
        print(tab + tab + "case {0}:".format(tok))
        print(tab + tab + tab + "return \"{0}\";".format(val))
    print(tab + tab + "default:")
    print(tab + tab + tab + "return NULL;")
    print(tab + "}")
    print("}\n\n")

    print("static inline enum {0} {1}(const char *str, const char **osp)".format(mtype, mident))
    print("{")
    print(tab + "enum {0} res = 0;".format(mtype))
    print(tab + "char c;")
    statmat(tree, icase, tab)
    print()
    print(tab + "if(osp)")
    print(tab + "{")
    print(tab + tab + "*osp = str;")
    print(tab + "}")
    print()
    print(tab + "return res;")
    print("}")
    print()

source = json.load(sys.stdin)

print("#ifndef {0}\n#define {0}".format(source["guard"]))
print("""
/* Generated by statmatch.py */

#include <stdlib.h>
""")
icase = source.get("case insensitive", False)
tree, toks = mktree(sorted(source["enumeration"].items()))
wrapmat(tree, icase, toks, source["enum name"], source["func name"], source["rfunc name"])
print("#endif")
